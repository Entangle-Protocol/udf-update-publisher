// Code generated by mockery v2.43.0. DO NOT EDIT.

package transactor

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "gitlab.ent-dx.com/entangle/pull-update-publisher/types"
)

// MockITransactor is an autogenerated mock type for the ITransactor type
type MockITransactor struct {
	mock.Mock
}

type MockITransactor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITransactor) EXPECT() *MockITransactor_Expecter {
	return &MockITransactor_Expecter{mock: &_m.Mock}
}

// LatestUpdate provides a mock function with given fields: dataKey
func (_m *MockITransactor) LatestUpdate(dataKey [32]byte) (*big.Int, *big.Int) {
	ret := _m.Called(dataKey)

	if len(ret) == 0 {
		panic("no return value specified for LatestUpdate")
	}

	var r0 *big.Int
	var r1 *big.Int
	if rf, ok := ret.Get(0).(func([32]byte) (*big.Int, *big.Int)); ok {
		return rf(dataKey)
	}
	if rf, ok := ret.Get(0).(func([32]byte) *big.Int); ok {
		r0 = rf(dataKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func([32]byte) *big.Int); ok {
		r1 = rf(dataKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*big.Int)
		}
	}

	return r0, r1
}

// MockITransactor_LatestUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestUpdate'
type MockITransactor_LatestUpdate_Call struct {
	*mock.Call
}

// LatestUpdate is a helper method to define mock.On call
//   - dataKey [32]byte
func (_e *MockITransactor_Expecter) LatestUpdate(dataKey interface{}) *MockITransactor_LatestUpdate_Call {
	return &MockITransactor_LatestUpdate_Call{Call: _e.mock.On("LatestUpdate", dataKey)}
}

func (_c *MockITransactor_LatestUpdate_Call) Run(run func(dataKey [32]byte)) *MockITransactor_LatestUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([32]byte))
	})
	return _c
}

func (_c *MockITransactor_LatestUpdate_Call) Return(_a0 *big.Int, _a1 *big.Int) *MockITransactor_LatestUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockITransactor_LatestUpdate_Call) RunAndReturn(run func([32]byte) (*big.Int, *big.Int)) *MockITransactor_LatestUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// SendUpdate provides a mock function with given fields: update
func (_m *MockITransactor) SendUpdate(update *types.MerkleRootUpdate) error {
	ret := _m.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for SendUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.MerkleRootUpdate) error); ok {
		r0 = rf(update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockITransactor_SendUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendUpdate'
type MockITransactor_SendUpdate_Call struct {
	*mock.Call
}

// SendUpdate is a helper method to define mock.On call
//   - update *types.MerkleRootUpdate
func (_e *MockITransactor_Expecter) SendUpdate(update interface{}) *MockITransactor_SendUpdate_Call {
	return &MockITransactor_SendUpdate_Call{Call: _e.mock.On("SendUpdate", update)}
}

func (_c *MockITransactor_SendUpdate_Call) Run(run func(update *types.MerkleRootUpdate)) *MockITransactor_SendUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.MerkleRootUpdate))
	})
	return _c
}

func (_c *MockITransactor_SendUpdate_Call) Return(_a0 error) *MockITransactor_SendUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockITransactor_SendUpdate_Call) RunAndReturn(run func(*types.MerkleRootUpdate) error) *MockITransactor_SendUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockITransactor creates a new instance of MockITransactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITransactor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITransactor {
	mock := &MockITransactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
