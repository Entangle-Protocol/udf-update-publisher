// Code generated by mockery v2.43.0. DO NOT EDIT.

package fetcher

import (
	mock "github.com/stretchr/testify/mock"
	fetcher "gitlab.ent-dx.com/entangle/pull-update-publisher/fetcher"
)

// MockIFetcher is an autogenerated mock type for the IFetcher type
type MockIFetcher struct {
	mock.Mock
}

type MockIFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIFetcher) EXPECT() *MockIFetcher_Expecter {
	return &MockIFetcher_Expecter{mock: &_m.Mock}
}

// GetFeedProofs provides a mock function with given fields:
func (_m *MockIFetcher) GetFeedProofs() (*fetcher.EntangleFeedProof, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeedProofs")
	}

	var r0 *fetcher.EntangleFeedProof
	var r1 error
	if rf, ok := ret.Get(0).(func() (*fetcher.EntangleFeedProof, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *fetcher.EntangleFeedProof); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fetcher.EntangleFeedProof)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIFetcher_GetFeedProofs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeedProofs'
type MockIFetcher_GetFeedProofs_Call struct {
	*mock.Call
}

// GetFeedProofs is a helper method to define mock.On call
func (_e *MockIFetcher_Expecter) GetFeedProofs() *MockIFetcher_GetFeedProofs_Call {
	return &MockIFetcher_GetFeedProofs_Call{Call: _e.mock.On("GetFeedProofs")}
}

func (_c *MockIFetcher_GetFeedProofs_Call) Run(run func()) *MockIFetcher_GetFeedProofs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIFetcher_GetFeedProofs_Call) Return(_a0 *fetcher.EntangleFeedProof, _a1 error) *MockIFetcher_GetFeedProofs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIFetcher_GetFeedProofs_Call) RunAndReturn(run func() (*fetcher.EntangleFeedProof, error)) *MockIFetcher_GetFeedProofs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIFetcher creates a new instance of MockIFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIFetcher {
	mock := &MockIFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
