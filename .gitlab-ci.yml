stages:
  - versioning
  - sonarqube
  - build
  - container_build
  - push
  - clean_up
  - deploy

versioning and prepare:
  stage: versioning
  script:
    - echo "Version is $CI_COMMIT_BRANCH.$CI_PIPELINE_ID"
  tags:
    - linux

# Run tests
dev_test:
  stage: build
  image: golang:latest
  script:
    - go test -v ./...
    # - go test -coverprofile=coverage.out -json ./... | tee test-report.json
  # artifacts:
  #   when: always
  #   paths:
  #     - test-report.json
  #     - coverage.out
  #   expire_in: 1 hour
  only:
    changes:
      - /*.go
  tags:
    - docker

dev_build:
  stage: container_build
  script:
    - docker build -f ./docker/Dockerfile.publisher -t 899260217834.dkr.ecr.us-east-1.amazonaws.com/pull-update-publisher:$CI_COMMIT_BRANCH.$CI_PIPELINE_ID .
  tags:
    - linux

push_to_aws:
  stage: push
  script:
    - docker push 899260217834.dkr.ecr.us-east-1.amazonaws.com/pull-update-publisher:$CI_COMMIT_BRANCH.$CI_PIPELINE_ID 
  tags:
    - linux

clean_up_image:
  stage: clean_up
  script:
    - docker rmi 899260217834.dkr.ecr.us-east-1.amazonaws.com/pull-update-publisher:$CI_COMMIT_BRANCH.$CI_PIPELINE_ID -f
  tags:
    - linux

deploy_pull-update-publisher:
  stage: deploy
  script:
    - git clone https://oauth2:$OAUTH_KEY@gitlab.ent-dx.com/devops/ci-scripts.git
    - python3 ci-scripts/awx_call.py https://awx.ent-dx.com/api/v2/job_templates/112/launch/ $AWX_TOKEN script_target:$CI_COMMIT_BRANCH.$CI_PIPELINE_ID
  tags:
    - linux
  when: manual
